variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  RULES_CHANGES_PATH: "**/*"
stages:
  - build
  - test
  - sonar

.base-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $RULES_CHANGES_PATH
    - when: manual
      allow_failure: true

.backend:
  extends: .base-rules
  variables:
    RULES_CHANGES_PATH: "backend/**/*"

.frontend:
  extends: .base-rules
  variables:
    RULES_CHANGES_PATH: "frontend/**/*"

#backend-build:
#  stage: build
#  extends: .backend
#  needs: []
#  script:
#    - echo "Compiling the backend code..."
#
#frontend-build:
#  stage: build
#  extends: .frontend
#  needs: []
#  image: node:latest
#  script:
#    - cd frontend/
#    - npm install
#    - npm run build
#
#backend-test:
#  stage: test
#  extends: .backend
#  needs: ["backend-build"]
#  script:
#    - echo "Testing the backend code..."

frontend-test:
  stage: test
  extends: .frontend
#  needs: ["frontend-build"]
  needs: []
  image: node:latest
  before_script:
    - cd frontend/
    - npm install
  script:
    - npm run test:ci
    - ls
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - frontend/coverage/
    when: always
    reports:
      junit:
        - junit.xml

#backend-sonar:
#  stage: sonar
#  extends: .backend
#  needs: ["backend-test"]
#  script:
#    - echo "Deploying the backend code..."
#
#frontend-sonar:
#  stage: sonar
#  extends: .frontend
#  needs: ["frontend-test"]
#  image:
#    name: sonarsource/sonar-scanner-cli:latest
#    entrypoint: [ "" ]
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#    - sonar-scanner

